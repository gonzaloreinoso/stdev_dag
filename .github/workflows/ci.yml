name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    name: Lint and Format
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install development dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        
    - name: Run Black (formatting check)
      run: black --check --diff .
      
    - name: Run isort (import sorting check)
      run: isort --check-only --diff .
      
    - name: Run Flake8 (linting)
      run: flake8 .

  test:
    runs-on: ubuntu-latest
    name: Run Tests
    # needs: lint-and-format  # Temporarily disabled to allow tests to run even if linting fails
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: airflow
          POSTGRES_USER: airflow
          POSTGRES_DB: airflow
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest pytest-cov pytest-mock
        
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=plugins --cov-report=xml --cov-report=term
        
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  dag-validation:
    runs-on: ubuntu-latest
    name: Validate DAGs
    # needs: lint-and-format  # Temporarily disabled to allow validation to run even if linting fails
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Validate DAG syntax
      run: |
        python -m py_compile dags/*.py
        
    - name: Test DAG loading
      run: |
        export AIRFLOW_HOME=$(pwd)
        export AIRFLOW__CORE__DAGS_FOLDER=$(pwd)/dags
        export AIRFLOW__CORE__LOAD_EXAMPLES=False
        python -c "
        import sys
        sys.path.insert(0, '$(pwd)')
        from airflow.models import DagBag
        dag_bag = DagBag(dag_folder='dags/', include_examples=False)
        if dag_bag.import_errors:
            for filename, error in dag_bag.import_errors.items():
                print(f'DAG import error in {filename}: {error}')
            sys.exit(1)
        print(f'Successfully loaded {len(dag_bag.dags)} DAGs')
        "

  staging-deploy:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [test, dag-validation]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Install Docker Compose
      run: |
        # Try using the newer docker compose command first
        if docker compose version; then
          echo "Using docker compose (newer version)"
          echo "DOCKER_COMPOSE_CMD=docker compose" >> $GITHUB_ENV
        else
          # Fallback to installing docker-compose
          echo "Installing docker-compose"
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
          echo "DOCKER_COMPOSE_CMD=docker-compose" >> $GITHUB_ENV
        fi
        
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Create staging environment file
        cat > .env.staging << EOF
        POSTGRES_PASSWORD_STAGING=${{ secrets.POSTGRES_PASSWORD_STAGING }}
        FERNET_KEY_STAGING=${{ secrets.FERNET_KEY_STAGING }}
        WEBSERVER_SECRET_KEY_STAGING=${{ secrets.WEBSERVER_SECRET_KEY_STAGING }}
        AIRFLOW_PASSWORD_STAGING=${{ secrets.AIRFLOW_PASSWORD_STAGING }}
        EOF
        
        # Build and deploy staging containers
        $DOCKER_COMPOSE_CMD -f docker-compose.staging.yml --env-file .env.staging up -d --build
        
        # Wait for services to be healthy
        echo "‚è≥ Waiting for services to be ready..."
        timeout 300 bash -c "until $DOCKER_COMPOSE_CMD -f docker-compose.staging.yml ps | grep -q 'healthy\|running'; do sleep 10; done"
        
        # Run smoke tests
        echo "üß™ Running staging smoke tests..."
        sleep 30  # Additional wait for full initialization
        
        # Check if Airflow webserver is responding
        curl -f http://localhost:8081/health || exit 1
        
        # Verify DAG loading
        $DOCKER_COMPOSE_CMD -f docker-compose.staging.yml exec -T airflow-staging python -c "
        from airflow.models import DagBag
        dag_bag = DagBag(dag_folder='/opt/airflow/dags/', include_examples=False)
        assert len(dag_bag.import_errors) == 0, f'DAG import errors: {dag_bag.import_errors}'
        assert len(dag_bag.dags) > 0, 'No DAGs found'
        print(f'‚úÖ Successfully loaded {len(dag_bag.dags)} DAGs in staging')
        "
        
        echo "‚úÖ Staging deployment successful!"
        
    - name: Cleanup staging environment
      if: always()
      run: |
        echo "üßπ Cleaning up staging environment..."
        $DOCKER_COMPOSE_CMD -f docker-compose.staging.yml down -v || true
        docker system prune -f || true

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Staging deployment successful - Available at http://staging.your-domain.com:8081"
        else
          echo "‚ùå Staging deployment failed"
        fi

  production-deploy:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [staging-deploy]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        # This would typically deploy to a production environment
        # For now, we'll just validate the deployment process
        echo "‚ö†Ô∏è Production deployment not yet implemented"
        echo "Would deploy to production environment here"
        
    - name: Run production health checks
      run: |
        echo "üè• Running production health checks..."
        echo "Would run comprehensive health checks here"
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "‚úÖ Production deployment successful"
        else
          echo "‚ùå Production deployment failed"
        fi
